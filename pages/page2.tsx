import Head from 'next/head'
import { useEffect, useState, useRef, useCallback, useMemo } from 'react'
import { iPosts, iComments, iAllData, iUsers } from '@/utility/type'
import { BasicCards } from '@/components/BasicCards2'
import { Container } from '@mui/material';
import { loadDataApi } from '@/pages/api/loadData';
import   TogglePageButton from"@/components/nav"
import ProgressBar from '@/components/Progress';

export default function Home() {

  const [posts, setPosts] = useState<iPosts[]>([])
  const [comments, setComments] = useState<iComments[]>([])
  const [users, setUsers] = useState<iUsers[]>([])
  const [loading, setLoading] = useState<boolean>(false)
  const executedRef = useRef(false)
  const loadAllData = async () => {
    const postsData = await loadDataApi(`${process.env.NEXT_PUBLIC_API}/posts`)
    const commentsData = await loadDataApi(`${process.env.NEXT_PUBLIC_API}/comments`)
    const usersData = await loadDataApi(`${process.env.NEXT_PUBLIC_API}/users`);
    setLoading(true)
 
    let id = posts.length
    if (posts.length === 0) {
      for (let i = 0; i < 20; i++) {
        posts.push(postsData[id++])
      }
    } else if (posts.length === 20) {
      for (let i = 0; i < 20; i++) {
        posts.push(postsData[id++])
      
      }
    }else if (posts.length === 40) {
      for (let i = 0; i < 20; i++) {
        posts.push(postsData[id++])
      
      }
    }else if (posts.length === 60){
      for (let i = 0; i < 20; i++) {
        posts.push(postsData[id++])
      }
    }else if (posts.length === 80){
      for (let i = 0; i < 20; i++) {
        posts.push(postsData[id++])
      }
      
    }else if (posts.length === 100){
      setLoading(false)
    }

    setComments(commentsData)
    setUsers(usersData)
  }

  useEffect(() => {
    if (executedRef.current) { return }
    loadAllData()
    executedRef.current = true
  }, []);
  

  const observer = useRef<IntersectionObserver | null>(null);
  const lastBookElementRef = useCallback((node: any) => {
    if (loading) return
    if (observer.current) observer.current.disconnect()
    observer.current = new IntersectionObserver(entries => {
      if (entries[0].isIntersecting) {
        setLoading(false)
        setTimeout(() => {
          loadAllData()
        }, 300)
        setLoading(true)
      }
    })
    if (node) observer.current.observe(node)
  }, [])



  return (
    <Container sx={{ paddingTop: 5, addingLeft: 100, paddingRight: 100 }}>
      <Head>
        <title>Assessment</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div >
         <TogglePageButton/>
        <p> {!loading && 'Loading...'}</p>
        <BasicCards cardList={posts} lastBookElementRef={lastBookElementRef} />
        <div style={{ display:"flex",justifyContent:"center", marginBottom: 25 }}>  {loading && <ProgressBar />}</div>
        <p style={{ textAlign: "center", marginBottom: 25 }}> {!loading && 'End of Posts.'}</p>
      </div>
    </Container>
  )
}

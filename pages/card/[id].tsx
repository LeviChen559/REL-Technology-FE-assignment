import { useEffect, useState } from 'react'
import Box from '@mui/material/Box';
import Card from '@mui/material/Card';
import CardActions from '@mui/material/CardActions';
import CardContent from '@mui/material/CardContent';
import CardMedia from '@mui/material/CardMedia';
import Button from '@mui/material/Button';
import Typography from '@mui/material/Typography';
import { useRouter } from 'next/router';
import { loadDataApi } from '@/pages/api/loadData';
import { iPosts, iUsers, iComments, iPhoto } from "../../utility/type/index"
import Avatar from '@mui/material/Avatar';
import CardHeader from '@mui/material/CardHeader';
import Head from "next/head";
import { Container } from "@mui/material";

export const getStaticPaths = async () => {
  const postsData = await loadDataApi(`${process.env.NEXT_PUBLIC_API}/posts`)
  const paths = postsData.map((post: iPosts) => ({ params: { id: post.id.toString() } }))
  return {
    paths,
    fallback: false
  }
}
export const getStaticProps = async (context: any) => {

  const id = context.params.id
  const postsData = await loadDataApi(`${process.env.NEXT_PUBLIC_API}/posts?id=${id}`)
  const commentsData = await loadDataApi(`${process.env.NEXT_PUBLIC_API}/comments?postId=${id}`)
  const usersData = await loadDataApi(`${process.env.NEXT_PUBLIC_API}/users`);
  let selectUserData = usersData.filter((user: iUsers) => user.id == postsData[0].userId);
  return {
    props: { posts: postsData[0], comments: commentsData, users: selectUserData[0] }

  }
}

export default function CardDetail({ posts, comments, users }: any) {

  const router = useRouter()
  const { id } = router.query;
  const [photo, setPhoto] = useState<iPhoto>()
  const [thumbNai, setThumbNai] = useState<iPhoto>()
  // const [comments, setComments] = useState<iComments[]>([])
  // const [users, setUsers] = useState<iUsers>({ 
  //   id: 0,name: "",username: "", email: "", address: "",phone: "", website: "",company: ""})



  const getBigPhoto = async () => {
    if (id) {
      const photosData = await loadDataApi(`${process.env.NEXT_PUBLIC_API}/photos?id=${id}`)
      setPhoto(photosData[0])
    }
  }
  useEffect(() => {    
    const getSmallPhoto = async () => {
      if (id) {
        const photosData = await loadDataApi(`${process.env.NEXT_PUBLIC_API}/photos?id=${id}`)
        setThumbNai(photosData[0])
      }
    }
    getSmallPhoto()
  },[id])

  if (posts === null) {
    return <div> 404 Can not find the book. </div>
  }


  return (
    <Container sx={{ paddingTop: 5, addingLeft: 100, paddingRight: 100 }}>
      <Head>
        <title>Card_page_{posts.id}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Card sx={{ minWidth: 275 }}>
        <CardContent>
          <Typography sx={{ fontSize: 10 }} color="text.secondary" gutterBottom>
            {posts.id}
          </Typography>
          <CardHeader 
           avatar={
          <Avatar alt={thumbNai?.title} src={thumbNai?.thumbnailUrl} /> 
          }
          title={users.username} 
          subheader=  {users.email}          
          />
       
          <CardMedia
            component="img"
            height="194"
            image={photo?.url}
            alt={photo?.title}
          />
          <Typography variant="h5" component="div">
            {posts.title}
          </Typography>
          <Typography sx={{ mb: 1.5 }} color="text.secondary">
            {posts.body}
          </Typography>
          {comments && comments.map((comment: iComments) => {
            return <Box key={comment.id} sx={{ margin: 2 }}>
              <Typography variant="body1" sx={{ fontWeight: 700 }}>
                {comment.name}
              </Typography>
              <Typography variant="body2">
                {comment.body}
              </Typography>

            </Box>
          })
          }
        </CardContent>
        <CardActions sx={{ display: "flex", justifyContent: "flex-end" }}>
          <Button size="small" onClick={() => getBigPhoto()} >load_Img</Button>
          <Button size="small" onClick={() => router.push("/")} >Go back</Button>
        </CardActions>
      </Card>
    </Container>
  );
}
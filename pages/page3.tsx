import Head from "next/head";
import { useState, useRef, useCallback } from "react";
import { iPosts } from "@/utility/type";
import { BasicCards } from "@/components/BasicCards2";
import { Container } from "@mui/material";
import { loadDataApi } from "@/pages/api/loadData";
import TogglePageButton from "@/components/nav";
import ProgressBar from "@/components/Progress";

export const getStaticProps = async () => {
  const postsData = await loadDataApi(`${process.env.NEXT_PUBLIC_API}/posts`);
  return {
    props: {
      posts: postsData.slice(0, 20),
    },
  };
};

export default function Home({ posts }: any) {
  const [allPosts, setAllPosts] = useState<iPosts[]>(posts);
  const [loading, setLoading] = useState<boolean>(false);
  const loadAllData = async () => {
    const postsData = await loadDataApi(`${process.env.NEXT_PUBLIC_API}/posts`);
    setLoading(false);
    const Generate20Posts = () => {
      for (let i = 0; i < 20; i++) {
        posts.push(postsData[id++]);
      }
    };
    let id = posts.length;
    if (posts.length < 100) {
        Generate20Posts();
      return
    } else if (posts.length === 100) {
      setLoading(false);
    }
  };
  const observer = useRef<IntersectionObserver | null>(null);
  const lastBookElementRef = useCallback(
    (node: any) => {
      if (loading) return;
      if (observer.current) observer.current.disconnect();
      observer.current = new IntersectionObserver((entries) => {
        if (entries[0].isIntersecting) {
          setLoading(false);
          setTimeout(() => {
            loadAllData();
          }, 500);
          setLoading(true);
        }
      });
      if (node) observer.current.observe(node);
    },
    [loading,loadAllData]
  );

  return (
    <Container sx={{ paddingTop: 5, addingLeft: 100, paddingRight: 100 }}>
      <Head>
      <title>Assessment_page3</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <TogglePageButton />
        <p> {loading && "Loading..."}</p>
        <BasicCards
          cardList={allPosts}
          lastBookElementRef={lastBookElementRef}
        />
        <div
          style={{
            display: "flex",
            justifyContent: "center",
            marginBottom: 25,
          }}
        >
          {" "}
          {loading && <ProgressBar />}
        </div>
        <p style={{ textAlign: "center", marginBottom: 25 }}>
          {" "}
          {!loading && "End of Posts."}
        </p>
      </div>
    </Container>
  );
}
